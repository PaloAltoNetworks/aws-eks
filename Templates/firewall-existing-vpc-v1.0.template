---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creates VPC, Subnets, Route Tables, SG, External Application ExLB, ASG
  for PANW firewall and Lambda Infrastructure for the VM-Series firewall
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID to be deployed into
  VPCCIDR:
    Type: String
    Description: Enter the VPC CIDR that you want to use
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  InternetGatewayID:
    Type: String
    Description: InternetGateway ID in the VPC to be deployed into
  BootstrapS3Bucket:
    Type: String
    Description: Enter the name of the Bootstrap S3 bucket for the VM-Series firewall
    MinLength: '3'
    MaxLength: '63'
  PanFwAmiId:
    Type: AWS::EC2::Image::Id
    Description: 'Link to Ami Id lookup table: https://docs.paloaltonetworks.com/compatibility-matrix/vm-series-firewalls/aws-cft-amazon-machine-images-ami-list.html'
  ELBName:
    Type: String
    Description: Enter the name of the external Application Load Balancer
    Default: public-exlb
    MinLength: '3'
    MaxLength: '12'
  KeyName:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    Description: Restrict SSH access to the VM-Series firewall (enter a valid CIDR
      range in the format of x.x.x.x/x)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range in the format of x.x.x.x/x
  NumberOfAZs:
    Description: Total Number of AZs which will be used in this deployment (Min 2
      and Max 3 depending on az availability)
    Type: Number
    MinValue: '2'
    Default: '2'
    MaxValue: '3'
  VpcAzs:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Enter the list of Availability Zones (Based on Number of AZs above)
  MgmtSubnetIpBlocks:
    Description: 'Management subnet comma-delimited list of CIDR blocks .Ex: 192.168.0.0/24,
      192.168.10.0/24, 192.168.20.0/24'
    Type: CommaDelimitedList
  UntrustSubnetIpBlocks:
    Description: Untrust subnet comma-delimited list of CIDR blocks. Ex:192.168.1.0/24,
      192.168.11.0/24, 192.168.21.0/24
    Type: CommaDelimitedList
  TrustSubnetIpBlocks:
    Description: 'Trust subnet comma-delimited list of CIDR blocks. Ex: 192.168.2.0/24,
      192.168.12.0/24, 192.168.22.0/24'
    Type: CommaDelimitedList
  NATGWSubnetIpBlocks:
    Description: AWS NAT Gateway Comma-delimited list of CIDR blocks. Ex:192.168.100.0/24,
      192.168.101.0/24, 192.168.102.0/24
    Type: CommaDelimitedList
  NumberOfFWs:
    Description: Total Number of firewalls in this deployment (Min 2 and Max 6 depending)
    Type: Number
    MinValue: '2'
    Default: '2'
    MaxValue: '6'
  LambdaS3Bucket:
    Type: String
    Description: VM-Series firewall Lambda/Scripts/CFT template S3 Bucket or your
      own in the same region
    MinLength: '3'
    MaxLength: '63'
  ELBType:
    Type: String
    Default: application
    AllowedValues:
    - application
    - network
    Description: Choose the type of external load balancer required in the firewall
      template
Mappings:
  KeyMap:
    Key:
      Key: panw-aws.zip
  FWInstanceTypeMap:
    TypeM4:
      M4xlarge: m4.xlarge
      M44xlarge: m4.4xlarge
    TypeM3:
      M3xlarge: m3.xlarge
      M32xlarge: m3.2xlarge
    TypeC4:
      C4xlarge: c4.xlarge
      C42xlarge: c4.2xlarge
      C44xlarge: c4.4xlarge
    TypeC3:
      C3xlarge: c3.xlarge
      C32xlarge: c3.2xlarge
      C34xlarge: c3.4xlarge
Conditions:
  CreateSubnet2:
    Fn::Equals:
    - Ref: NumberOfAZs
    - '2'
  CreateSubnet3:
    Fn::Equals:
    - Ref: NumberOfAZs
    - '3'
  CreateELBTypeApp:
    Fn::Equals:
    - Ref: ELBType
    - application
  CreateELBTypeNet:
    Fn::Equals:
    - Ref: ELBType
    - network
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC Configuration
      Parameters:
      - VPCID
      - VPCCIDR
      - InternetGatewayID
      - MgmtSubnetIpBlocks
      - UntrustSubnetIpBlocks
      - TrustSubnetIpBlocks
      - NATGateway
      - NATGWSubnetIpBlocks
      - LambdaSubnetIpBlocks
      - NumberOfAZs
      - VpcAzs
      - ELBType
    - Label:
        default: VM-Series firewall Instance configuration
      Parameters:
      - PanFwAmiId
      - KeyName
      - SSHLocation
      - NumberOfFWs
    - Label:
        default: S3 Bucket details
      Parameters:
      - BootstrapS3Bucket
      - LambdaS3Bucket
    - Label:
        default: Cross-account configuration
      Parameters:
      - SubscriberAWSAccountNumber
    ParameterLabels:
      VPCID:
        default: 'VPC Id:'
      VPCCIDR:
        default: 'CIDR Block for the VPC:'
      InternetGatewayID:
        default: 'InternetGateway Id:'
      MgmtSubnetIpBlocks:
        default: 'Management Subnet CIDR Block:'
      UntrustSubnetIpBlocks:
        default: 'Untrust Subnet CIDR Block:'
      TrustSubnetIpBlocks:
        default: 'Trust Subnet CIDR Block:'
      NATGWSubnetIpBlocks:
        default: 'NAT Gateway Subnet CIDR Block:'
      PanFwAmiId:
        default: 'AMIId of PANFW Image:'
      KeyName:
        default: 'Key pair:'
      SSHLocation:
        default: 'SSH From:'
      BootstrapS3Bucket:
        default: Bootstrap bucket for VM-Series firewalls
      LambdaS3Bucket:
        default: 'S3 Bucket Name for Lambda Code:'
      ELBName:
        default: 'Name of External Load Balancer:'
      VpcAzs:
        default: 'Select  AZs:'
      AZSubnetIDUntrust:
        default: 'Subnet ID of Untrust Interface:'
      AZSubnetIDTrust:
        default: 'Subnet ID of Trust Interface:'
Resources:
  NATGWSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Ref: VpcAzs
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '0'
        - Ref: NATGWSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: NATGW
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - NATGWSubnetAz1
  NATGWSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Ref: VpcAzs
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '1'
        - Ref: NATGWSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: NATGW
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - NATGWSubnetAz2
  NATGWSubnetAz3:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnet3
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Ref: VpcAzs
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '2'
        - Ref: NATGWSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: NATGW
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - NATGWSubnetAz3
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPCID
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPCID
  EIP3:
    Type: AWS::EC2::EIP
    Condition: CreateSubnet3
    Properties:
      Domain: VPCID
  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP1
        - AllocationId
      SubnetId:
        Ref: NATGWSubnetAz1
    DependsOn:
    - EIP1
    - NATGWSubnetAz1
  NAT2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP2
        - AllocationId
      SubnetId:
        Ref: NATGWSubnetAz2
    DependsOn:
    - EIP2
    - NATGWSubnetAz2
  NAT3:
    Type: AWS::EC2::NatGateway
    Condition: CreateSubnet3
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP3
        - AllocationId
      SubnetId:
        Ref: NATGWSubnetAz3
    DependsOn:
    - EIP3
    - NATGWSubnetAz3
  MGMTSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Ref: VpcAzs
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '0'
        - Ref: MgmtSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: MGMT
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - MGMTSubnetAz1
  MGMTSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Ref: VpcAzs
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '1'
        - Ref: MgmtSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: MGMT
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - MGMTSubnetAz2
  MGMTSubnetAz3:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnet3
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Ref: VpcAzs
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '2'
        - Ref: MgmtSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: MGMT
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - MGMTSubnetAz3
  NATGWRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - NATGWRouteTableAz1
  NATGWRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - NATGWRouteTableAz2
  NATGWRouteTableAz3:
    Type: AWS::EC2::RouteTable
    Condition: CreateSubnet3
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - NATGWRouteTableAz3
  NATGWRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: NATGWRouteTableAz1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGatewayID
    DependsOn:
    - NATGWRouteTableAz1
  NATGWRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: NATGWRouteTableAz2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGatewayID
    DependsOn:
    - NATGWRouteTableAz2
  NATGWRoute3:
    Type: AWS::EC2::Route
    Condition: CreateSubnet3
    Properties:
      RouteTableId:
        Ref: NATGWRouteTableAz3
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGatewayID
    DependsOn:
    - NATGWRouteTableAz3
  MGMTRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - MGMTRouteTableAz1
  MGMTRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - MGMTRouteTableAz2
  MGMTRouteTableAz3:
    Type: AWS::EC2::RouteTable
    Condition: CreateSubnet3
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - MGMTRouteTableAz3
  MGMTRouteNAT1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MGMTRouteTableAz1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1
    DependsOn:
    - NAT1
  MGMTRouteNAT2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MGMTRouteTableAz2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT2
    DependsOn:
    - NAT2
  MGMTRouteNAT3:
    Type: AWS::EC2::Route
    Condition: CreateSubnet3
    Properties:
      RouteTableId:
        Ref: MGMTRouteTableAz3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT3
    DependsOn:
    - NAT3
  NAT1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: NATGWSubnetAz1
      RouteTableId:
        Ref: NATGWRouteTableAz1
    DependsOn:
    - NATGWRouteTableAz1
    - NATGWSubnetAz1
  NAT2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: NATGWSubnetAz2
      RouteTableId:
        Ref: NATGWRouteTableAz2
    DependsOn:
    - NATGWRouteTableAz2
    - NATGWSubnetAz2
  NAT3SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnet3
    Properties:
      SubnetId:
        Ref: NATGWSubnetAz3
      RouteTableId:
        Ref: NATGWRouteTableAz3
    DependsOn:
    - NATGWRouteTableAz3
    - NATGWSubnetAz3
  MGMTSubnetRouteTableAssociationNAT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: MGMTSubnetAz1
      RouteTableId:
        Ref: MGMTRouteTableAz1
    DependsOn:
    - MGMTRouteNAT1
    - MGMTSubnetAz1
  MGMTSubnetRouteTableAssociationNAT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: MGMTSubnetAz2
      RouteTableId:
        Ref: MGMTRouteTableAz2
    DependsOn:
    - MGMTSubnetAz2
  MGMTSubnetRouteTableAssociationNAT3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnet3
    Properties:
      SubnetId:
        Ref: MGMTSubnetAz3
      RouteTableId:
        Ref: MGMTRouteTableAz3
    DependsOn:
    - MGMTSubnetAz3
  UNTRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Ref: VpcAzs
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '0'
        - Ref: UntrustSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: UNTRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - UNTRUSTSubnet1
  UNTRUSTSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Ref: VpcAzs
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '1'
        - Ref: UntrustSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: UNTRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - UNTRUSTSubnet2
  UNTRUSTSubnet3:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnet3
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Ref: VpcAzs
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '2'
        - Ref: UntrustSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: UNTRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - UNTRUSTSubnet3
  UNTRUSTRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: UNTRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - UNTRUSTRouteTable
  UNTRUSTRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: UNTRUSTRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGatewayID
    DependsOn:
    - UNTRUSTRouteTable
  UNTRUSTSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UNTRUSTSubnet1
      RouteTableId:
        Ref: UNTRUSTRouteTable
    DependsOn:
    - UNTRUSTRoute
    - UNTRUSTSubnet1
  UNTRUSTSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UNTRUSTSubnet2
      RouteTableId:
        Ref: UNTRUSTRouteTable
    DependsOn:
    - UNTRUSTRoute
    - UNTRUSTSubnet2
  UNTRUSTSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnet3
    Properties:
      SubnetId:
        Ref: UNTRUSTSubnet3
      RouteTableId:
        Ref: UNTRUSTRouteTable
    DependsOn:
    - UNTRUSTRoute
    - UNTRUSTSubnet3
  TRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Ref: VpcAzs
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '0'
        - Ref: TrustSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: TRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - TRUSTSubnet1
  TRUSTSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Ref: VpcAzs
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '1'
        - Ref: TrustSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: TRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - TRUSTSubnet2
  TRUSTSubnet3:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnet3
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Ref: VpcAzs
      VpcId:
        Ref: VPCID
      CidrBlock:
        Fn::Select:
        - '2'
        - Ref: TrustSubnetIpBlocks
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: TRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - TRUSTSubnet3
  TrustRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: TRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - TrustRouteTableAz1
  TrustRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: TRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - TrustRouteTableAz2
  TrustRouteTableAz3:
    Type: AWS::EC2::RouteTable
    Condition: CreateSubnet3
    Properties:
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: TRUST
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - TrustRouteTableAz3
  #TrustRouteNAT1:
  #  Type: AWS::EC2::Route
  #  Properties:
  #    RouteTableId:
  #      Ref: TrustRouteTableAz1
  #    DestinationCidrBlock: 0.0.0.0/0
  #    NatGatewayId:
  #      Ref: NAT1
  #  DependsOn:
  #  - NAT1
  #TrustRouteNAT2:
  #  Type: AWS::EC2::Route
  #  Properties:
  #    RouteTableId:
  #      Ref: TrustRouteTableAz2
  #    DestinationCidrBlock: 0.0.0.0/0
  #    NatGatewayId:
  #      Ref: NAT2
  #  DependsOn:
  #  - NAT2
  #TrustRouteNAT3:
  #  Type: AWS::EC2::Route
  #  Condition: CreateSubnet3
  #  Properties:
  #    RouteTableId:
  #      Ref: TrustRouteTableAz3
  #   DestinationCidrBlock: 0.0.0.0/0
  #    NatGatewayId:
  #      Ref: NAT3
  #  DependsOn:
  #  - NAT3
  TRUSTSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: TRUSTSubnet1
      RouteTableId:
        Ref: TrustRouteTableAz1
    DependsOn:
    - TRUSTSubnet1
  TRUSTSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: TRUSTSubnet2
      RouteTableId:
        Ref: TrustRouteTableAz2
    DependsOn:
    - TRUSTSubnet2
  TRUSTSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnet3
    Properties:
      SubnetId:
        Ref: TRUSTSubnet3
      RouteTableId:
        Ref: TrustRouteTableAz3
    DependsOn:
    - TRUSTSubnet3
  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public ALB Security Group with HTTP access on port 80 from
        the internet
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - PublicLoadBalancerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '1'
        ToPort: '65500'
        CidrIp: 0.0.0.0/0
  PublicLoadBanlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Fn::If:
          - CreateELBTypeApp
          - Ref: PublicLoadBalancerTargetGroup
          - Ref: NetworkLoadBalancerTargetGroup
      LoadBalancerArn:
        Ref: PublicLoadBalancer
      Port: '80'
      Protocol:
        Fn::If:
        - CreateELBTypeApp
        - HTTP
        - TCP
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Ref: ELBName
      Type:
        Ref: ELBType
      SecurityGroups:
      - Fn::If:
        - CreateELBTypeApp
        - Ref: PublicLoadBalancerSecurityGroup
        - Ref: AWS::NoValue
      Subnets:
        Fn::If:
        - CreateSubnet2
        - Fn::Split:
          - ":"
          - Fn::Join:
            - ":"
            - - Ref: UNTRUSTSubnet1
              - Ref: UNTRUSTSubnet2
        - Fn::If:
          - CreateSubnet3
          - Fn::Split:
            - ":"
            - Fn::Join:
              - ":"
              - - Ref: UNTRUSTSubnet1
                - Ref: UNTRUSTSubnet2
                - Ref: UNTRUSTSubnet3
          - Fn::Split:
            - ":"
            - Fn::Join:
              - ":"
              - - Ref: UNTRUSTSubnet1
                - Ref: UNTRUSTSubnet2
                - Ref: UNTRUSTSubnet3
      Scheme: internet-facing
    DependsOn:
    - PublicLoadBalancerSecurityGroup
    - UNTRUSTSubnet1
    - UNTRUSTSubnet2
  PublicLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateELBTypeApp
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckProtocol: HTTP
      HealthCheckPort: '81'
      HealthCheckPath: "/index.html"
      Matcher:
        HttpCode: '200'
      Port: 81
      Protocol: HTTP
      VpcId:
        Ref: VPCID
  NetworkLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateELBTypeNet
    Properties:
      Port: '81'
      Protocol: TCP
      UnhealthyThresholdCount: '3'
      VpcId:
        Ref: VPCID
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateSubnet2
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: "*"
          Action: s3:ListBucket
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: BootstrapS3Bucket
        - Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: BootstrapS3Bucket
              - "/*"
      RouteTableIds:
      - Ref: UNTRUSTRouteTable
      ServiceName:
        Fn::Join:
        - ''
        - - com.amazonaws.
          - Ref: AWS::Region
          - ".s3"
      VpcId:
        Ref: VPCID
  S3Endpoint3:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateSubnet3
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: "*"
          Action: s3:ListBucket
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: BootstrapS3Bucket
        - Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: BootstrapS3Bucket
              - "/*"
      RouteTableIds:
      - Ref: UNTRUSTRouteTable
      ServiceName:
        Fn::Join:
        - ''
        - - com.amazonaws.
          - Ref: AWS::Region
          - ".s3"
      VpcId:
        Ref: VPCID
  FirewallBootstrapRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: FirewallBootstrapRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: BootstrapS3Bucket
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: BootstrapS3Bucket
                - "/*"
          - Effect: Allow
            Action:
            - cloudwatch:*
            Resource:
            - "*"
  FirewallBootstrapInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: FirewallBootstrapRole
    DependsOn:
    - FirewallBootstrapRole
  MgmtSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH to MGMT interface
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - MgmtSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp:
          Ref: VPCCIDR
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: VPCCIDR
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
  UntrustSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Untrust interface
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - UntrustSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
  TrustSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for trust interface
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - TrustSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for within VPC
      VpcId:
        Ref: VPCID
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - VPCSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaExecutionRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: BootstrapS3Bucket
                - "/*"
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: BootstrapS3Bucket
                - "/*"
          - Effect: Allow
            Action: s3:ListBucket
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: LambdaS3Bucket
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: LambdaS3Bucket
                - "/*"
          - Effect: Allow
            Action:
            - iam:UpdateAssumeRolePolicy
            - iam:GetRole
            - iam:PassRole
            - iam:CreateServiceLinkedRole
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - ec2:AllocateAddress
            - ec2:AssociateAddress
            - ec2:AssociateRouteTable
            - ec2:AttachNetworkInterface
            - ec2:CreateNetworkInterface
            - ec2:CreateTags
            - ec2:CreateRoute
            - ec2:CreateVpcEndpoint
            - ec2:DeleteNetworkInterface
            - ec2:DeleteRouteTable
            - ec2:DeleteRoute
            - ec2:DeleteSecurityGroup
            - ec2:DeleteTags
            - ec2:DeleteVpcEndpoints
            - ec2:DescribeAddresses
            - ec2:DescribeAvailabilityZones
            - ec2:DescribeVpcEndpointServices
            - ec2:DescribeInstanceAttribute
            - ec2:DescribeInstanceStatus
            - ec2:DescribeInstances
            - ec2:DescribeImages
            - ec2:DescribeNatGateways
            - ec2:DescribeNetworkInterfaceAttribute
            - ec2:DescribeNetworkInterfaces
            - ec2:DescribeTags
            - ec2:DescribeVpcEndpoints
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - ec2:DescribeSecurityGroups
            - ec2:DetachNetworkInterface
            - ec2:DetachVolume
            - ec2:DisassociateAddress
            - ec2:DisassociateRouteTable
            - ec2:ModifyNetworkInterfaceAttribute
            - ec2:ModifySubnetAttribute
            - ec2:MonitorInstances
            - ec2:RebootInstances
            - ec2:ReleaseAddress
            - ec2:ReportInstanceStatus
            - ec2:RunInstances
            - ec2:TerminateInstances
            - ec2:DescribeIdFormat
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - events:*
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - cloudwatch:*
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - lambda:AddPermission
            - lambda:CreateEventSourceMapping
            - lambda:CreateFunction
            - lambda:DeleteEventSourceMapping
            - lambda:DeleteFunction
            - lambda:GetEventSourceMapping
            - lambda:ListEventSourceMappings
            - lambda:RemovePermission
            - lambda:UpdateEventSourceMapping
            - lambda:UpdateFunctionCode
            - lambda:UpdateFunctionConfiguration
            - lambda:GetFunction
            - lambda:ListFunctions
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - autoscaling:*
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:SendMessage
            - sqs:SetQueueAttributes
            - sqs:PurgeQueue
            - sqs:DeleteMessage
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - elasticloadbalancing:AddTags
            - elasticloadbalancing:AttachLoadBalancerToSubnets
            - elasticloadbalancing:ConfigureHealthCheck
            - elasticloadbalancing:DescribeInstanceHealth
            - elasticloadbalancing:DescribeLoadBalancerAttributes
            - elasticloadbalancing:DescribeLoadBalancerPolicyTypes
            - elasticloadbalancing:DescribeLoadBalancerPolicies
            - elasticloadbalancing:DescribeLoadBalancers
            - elasticloadbalancing:DescribeTags
            - elasticloadbalancing:DetachLoadBalancerFromSubnets
            - elasticloadbalancing:ModifyLoadBalancerAttributes
            - elasticloadbalancing:RemoveTags
            - elasticloadbalancing:DescribeTargetGroups
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutDestination
            - logs:PutDestinationPolicy
            - logs:PutLogEvents
            - logs:PutMetricFilter
            Resource:
            - "*"
          - Effect: Allow
            Action: dynamodb:*
            Resource: arn:aws:dynamodb:*:*:*
  FwInit:
    Type: AWS::Lambda::Function
    Properties:
      Handler: fw_init.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          Ref: LambdaS3Bucket
        S3Key:
          Fn::FindInMap:
          - KeyMap
          - Key
          - Key
      Runtime: python2.7
      Timeout: '300'
    DependsOn:
    - LambdaExecutionRole
    - VPCSecurityGroup
  LambdaENISNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - FwInit
          - Arn
        Protocol: lambda
    DependsOn:
    - FwInit
  LambdaENIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - FwInit
        - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: LambdaENISNSTopic
    DependsOn:
    - FwInit
    - LambdaENISNSTopic
  ASGNotifierRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - autoscaling.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  ASGNotifierRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Ref: AWS::StackName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sns:Publish
          Resource:
            Ref: LambdaENISNSTopic
      Roles:
      - Ref: ASGNotifierRole
    DependsOn:
    - ASGNotifierRole
    - LambdaENISNSTopic
  InitLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: init.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          Ref: LambdaS3Bucket
        S3Key:
          Fn::FindInMap:
          - KeyMap
          - Key
          - Key
      Runtime: python2.7
      Timeout: '300'
    DependsOn:
    - LambdaExecutionRole
  LambdaCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    DependsOn:
    - FwInit
    - InitLambda
    - TrustSecurityGroup
    - UntrustSecurityGroup
    - MgmtSecurityGroup
    - VPCSecurityGroup
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - InitLambda
        - Arn
      StackName:
        Ref: AWS::StackName
      Region:
        Ref: AWS::Region
      VpcId:
        Ref: VPCID
      SubnetIDMgmt:
        Fn::If:
        - CreateSubnet2
        - Fn::Join:
          - ","
          - - Ref: MGMTSubnetAz1
            - Ref: MGMTSubnetAz2
        - Fn::Join:
          - ","
          - - Ref: MGMTSubnetAz1
            - Ref: MGMTSubnetAz2
            - Ref: MGMTSubnetAz3
      SubnetIDUntrust:
        Fn::If:
        - CreateSubnet2
        - Fn::Join:
          - ","
          - - Ref: UNTRUSTSubnet1
            - Ref: UNTRUSTSubnet2
        - Fn::Join:
          - ","
          - - Ref: UNTRUSTSubnet1
            - Ref: UNTRUSTSubnet2
            - Ref: UNTRUSTSubnet3
      SubnetIDTrust:
        Fn::If:
        - CreateSubnet2
        - Fn::Join:
          - ","
          - - Ref: TRUSTSubnet1
            - Ref: TRUSTSubnet2
        - Fn::Join:
          - ","
          - - Ref: TRUSTSubnet1
            - Ref: TRUSTSubnet2
            - Ref: TRUSTSubnet3
      RouteTableIDTrust:
        Fn::If:
        - CreateSubnet2
        - Fn::Join:
          - ","
          - - Ref: TrustRouteTableAz1
            - Ref: TrustRouteTableAz2
        - Fn::Join:
          - ","
          - - Ref: TrustRouteTableAz1
            - Ref: TrustRouteTableAz2
            - Ref: TrustRouteTableAz3
      MgmtSecurityGroup:
        Ref: MgmtSecurityGroup
      UntrustSecurityGroup:
        Ref: UntrustSecurityGroup
      TrustSecurityGroup:
        Ref: TrustSecurityGroup
      VPCSecurityGroup:
        Ref: VPCSecurityGroup
      KeyName:
        Ref: KeyName
      ELBName:
        Ref: ELBName
      ELBTargetGroupName:
        Fn::Select:
        - 1
        - Fn::If:
          - CreateELBTypeApp
          - Fn::Split:
            - "/"
            - Fn::GetAtt:
              - PublicLoadBalancerTargetGroup
              - TargetGroupFullName
          - Fn::Split:
            - "/"
            - Fn::GetAtt:
              - NetworkLoadBalancerTargetGroup
              - TargetGroupFullName
      FWInstanceType:
        Fn::FindInMap:
        - FWInstanceTypeMap
        - TypeM4
        - M4xlarge
      SSHLocation:
        Ref: SSHLocation
      NumberOfFWs:
        Ref: NumberOfFWs
      ImageID:
        Ref: PanFwAmiId
      LambdaENISNSTopic:
        Ref: LambdaENISNSTopic
      FirewallBootstrapRole:
        Ref: FirewallBootstrapInstanceProfile
      LambdaExecutionRole:
        Ref: LambdaExecutionRole
      ASGNotifierRole:
        Fn::GetAtt:
        - ASGNotifierRole
        - Arn
      ASGNotifierRolePolicy:
        Ref: ASGNotifierRolePolicy
      BootstrapS3Bucket:
        Ref: BootstrapS3Bucket
      LambdaS3Bucket:
        Ref: LambdaS3Bucket
      PanS3KeyTpl:
        Fn::FindInMap:
        - KeyMap
        - Key
        - Key
      SubnetIDNATGW:
        Fn::If:
        - CreateSubnet2
        - Fn::Join:
          - ","
          - - Ref: NATGWSubnetAz1
            - Ref: NATGWSubnetAz2
        - Fn::Join:
          - ","
          - - Ref: NATGWSubnetAz1
            - Ref: NATGWSubnetAz2
            - Ref: NATGWSubnetAz3
      FwInit:
        Ref: FwInit
      InitLambda:
        Ref: InitLambda
      FWLaunchTemplate:
        Ref: FWLaunchTemplate
      PublicLoadBalancerTargetGroupARNs:
        Fn::If:
        - CreateELBTypeApp
        - Ref: PublicLoadBalancerTargetGroup
        - Ref: NetworkLoadBalancerTargetGroup
  FWLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName:
        Fn::Join:
        - "-"
        - - Fn::Select:
            - 1
            - Fn::If:
              - CreateELBTypeApp
              - Fn::Split:
                - "/"
                - Fn::GetAtt:
                  - PublicLoadBalancerTargetGroup
                  - TargetGroupFullName
              - Fn::Split:
                - "/"
                - Fn::GetAtt:
                  - NetworkLoadBalancerTargetGroup
                  - TargetGroupFullName
          - PANW-Firewall-LaunchTemplate
      LaunchTemplateData:
        ImageId:
          Ref: PanFwAmiId
        InstanceType:
          Fn::FindInMap:
          - FWInstanceTypeMap
          - TypeM4
          - M4xlarge
        KeyName:
          Ref: KeyName
        SecurityGroupIds:
        - Fn::GetAtt:
          - UntrustSecurityGroup
          - GroupId
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - FirewallBootstrapInstanceProfile
            - Arn
        EbsOptimized: 'true'
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: 'true'
        UserData:
          Fn::Base64:
            Fn::Join:
            - ''
            - - vmseries-bootstrap-aws-s3bucket=
              - Ref: BootstrapS3Bucket
Outputs:
  ELBName:
    Value:
      Ref: ELBName
    Description: Elastic Application Load Balancer (Public) name
  ELBDNSName:
    Value:
      Fn::GetAtt:
      - PublicLoadBalancer
      - DNSName
    Description: Elastic Application Load Balancer (Public) DNS name
  KeyName:
    Value:
      Ref: KeyName
    Description: Key Pair you have selected for SSH
  SSHLocation:
    Value:
      Ref: SSHLocation
    Description: Make sure you SSH from this IP address
  BootstrapS3Bucket:
    Value:
      Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: BootstrapS3Bucket
    Description: Your Bootstrap bucket being used for this deployment
  LambdaS3Bucket:
    Value:
      Ref: LambdaS3Bucket
    Description: Your Template/Lambda Code bucket being used for this deployment
  LambdaCodeFile:
    Value:
      Fn::FindInMap:
      - KeyMap
      - Key
      - Key
    Description: File name of the Lambda Code being run
  InternetGatewayID:
    Value:
      Ref: InternetGatewayID
    Description: Internet Gateway ID
